* List
List type contains a list of values of type =T=.

** Options
- =initialState?: T[] = []= :: Optional list to initialize in Redux
- =equals?: (a: T, b: T) => boolean= :: Optional comparator to check if two values of type =T= are identical (default to triple equals)
- =listEquals?: (equals: a: T, b: T) => (a: T[], b: T[]) => boolean= :: Optional generator to create a comparator to check if lists of type =T[]= are identical

** Actions
- =clear()= :: Empty list
- =insert(items: T | T[])= :: Add items into list
- =remove(items: T | T[])= :: Remove all occurrences of each item in list
- =removeOnce(items: T | T[])= :: Remove first occurrence of each item in list
- =reset()= :: Reset list to initial state
- =set(newValue: T[])= :: Change current list to specified list

** Selectors
- =contains(state: S, item: T): boolean= :: If =true=, then item is in list
- =empty(state: S): boolean= :: If =true=, then list is empty
- =get(state: S): T[]= :: Get list

** Example
#+BEGIN_SRC typescript
import {createStore} from 'redux'
import {Builders, Types} from 'redux-artificer'

interface Custom {
  id: number
  value: string
}

const {actions, reducer, selectors} = Builders.build({
  customList: Types.List.New<Custom>(),
  numberList: Types.List.New({initialState: [-1, 0, 1]}),
})

const store = createStore(reducer)
const contains = selectors.numberList.contains(store.getState(), 1)
store.dispatch(actions.customList.insert({id: 1, value: 2}))
store.dispatch(actions.numberList.remove([0, 1]))
#+END_SRC
