* Optional
Optional type behaves similarly to value type, except that value of type =T= can be uninitialized.

** Options
- =initialState?: T= :: Optional value to initialize in Redux
- =equals?: (a: T | undefined, b: T | undefined) => boolean= :: Optional comparator to check if two values of type =T= are identical (default to triple equals)

** Actions
- =reset()= :: Reset value to initial state
- =set(newValue: T)= :: Change current value to specified value
- =unset()= :: Uninitialize value

** Selectors
- =get(state: S): T | undefined= :: Get value (=undefined= if uninitialized)
- =isSet(state: S): boolean= :: If =true=, then value is initialized

** Example
#+BEGIN_SRC typescript
import {createStore} from 'redux'
import {Builders, Types} from 'redux-artificer'

const {actions, reducer, selectors} = Builders.build({
  optional1: Types.Optional.New<string>(),
  optional2: Types.Optional.New({initialState: 1}),
})

const store = createStore(reducer)
const is1Set = selectors.optional1.isSet(store.getState())
store.dispatch(actions.optional2.unset())
#+END_SRC
