* Stack
Stack type contains a list of unique values of type =T=. Adding/removing items acts like a stack. (LIFO)

** Options
- =initialState?: T[] = []= :: Optional list to initialize in Redux
- =equals?: (a: T, b: T) => boolean= :: Optional comparator to check if two values of type =T= are identical (default to triple equals)
- =listEquals?: (equals: a: T, b: T) => (a: T[], b: T[]) => boolean= :: Optional generator to create a comparator to check if lists of type =T[]= are identical

** Actions
- =clear()= :: Empty stack
- =insert(items: T | T[])= :: Add (push) items into the top of the stack
- =remove(count: number = 1)= :: Remove (pop) a number of items off the top of the stack
- =reset()= :: Reset stack to initial state
- =set(newValue: T[])= :: Change current stack to specified list

** Selectors
- =contains(state: S, item: T): boolean= :: If =true=, then item is in stack
- =empty(state: S): boolean= :: If =true=, then stack is empty
- =get(state: S): T[]= :: Get stack
- =peek(state: S): T | undefined= :: View the top of the stack (=undefined= if empty)

** Example
#+BEGIN_SRC typescript
import {createStore} from 'redux'
import {Builders, Types} from 'redux-artificer'

const {actions, reducer, selectors} = Builders.build({
  set: Types.Set.New<number>(),
})

const store = createStore(reducer)
const contains = selectors.set.contains(store.getState(), 1)
store.dispatch(actions.set.insert(1))
store.dispatch(actions.set.remove([0, 1]))
#+END_SRC
